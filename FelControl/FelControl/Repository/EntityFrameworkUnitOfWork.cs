//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using the template for generating Repositories and a Unit of Work for EF Core model.
// Code is generated on: 7/29/2023 5:04:09 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using FelControl;

namespace FelControl.Data
{
    public partial class EntityFrameworkUnitOfWork : IUnitOfWork
    {
        protected DbContext context = null;

        IRepository<User> _Users;

        IRepository<UserAdress> _UserAdresses;

        IRepository<Client> _Clients;

        IRepository<Service> _Services;

        IRepository<ClientAdress> _ClientAdresses;

        IRepository<Schedule> _Schedules;

        IRepository<UserService> _UserServices;

        IRepository<ServiceAdress> _ServiceAdresses;

        public EntityFrameworkUnitOfWork()
            : this(new ApplicationDbContext())
        {
        }

        public EntityFrameworkUnitOfWork(DbContext context)
        {
            if (context == null)
            {
                throw new ArgumentNullException("context");
            }
            this.context = context;
        }

        public DbContext Context
        {
            get
            {
                return context;
            }
        }

        protected virtual void CloseContext()
        {
            if (context != null)
            {
                context.Dispose();
                context = null;
            }
        }

        #region IDisposable Methods

        private bool disposed = false;

        protected virtual void Dispose(bool disposing)
        {
            if (!this.disposed)
            {
                if (disposing)
                {
                    CloseContext();
                }
            }
            this.disposed = true;
        }

        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

        #endregion

        #region IUnitOfWork Members

        public IRepository<User> Users {
          get {
            if (_Users == null)
              _Users = new EntityFrameworkRepository<User>(context);
            return _Users;
          }
        }

        public IRepository<UserAdress> UserAdresses {
          get {
            if (_UserAdresses == null)
              _UserAdresses = new EntityFrameworkRepository<UserAdress>(context);
            return _UserAdresses;
          }
        }

        public IRepository<Client> Clients {
          get {
            if (_Clients == null)
              _Clients = new EntityFrameworkRepository<Client>(context);
            return _Clients;
          }
        }

        public IRepository<Service> Services {
          get {
            if (_Services == null)
              _Services = new EntityFrameworkRepository<Service>(context);
            return _Services;
          }
        }

        public IRepository<ClientAdress> ClientAdresses {
          get {
            if (_ClientAdresses == null)
              _ClientAdresses = new EntityFrameworkRepository<ClientAdress>(context);
            return _ClientAdresses;
          }
        }

        public IRepository<Schedule> Schedules {
          get {
            if (_Schedules == null)
              _Schedules = new EntityFrameworkRepository<Schedule>(context);
            return _Schedules;
          }
        }

        public IRepository<UserService> UserServices {
          get {
            if (_UserServices == null)
              _UserServices = new EntityFrameworkRepository<UserService>(context);
            return _UserServices;
          }
        }

        public IRepository<ServiceAdress> ServiceAdresses {
          get {
            if (_ServiceAdresses == null)
              _ServiceAdresses = new EntityFrameworkRepository<ServiceAdress>(context);
            return _ServiceAdresses;
          }
        }

        public virtual void Save()
        {
            if (context == null)
                throw new InvalidOperationException("Context has not been initialized.");
            context.SaveChanges();
        }

        #endregion
    }
}
